{"version":3,"sources":["webpack:///./scripts/rendering.js","webpack:///./scripts/notifications.js","webpack:///./index.js","webpack:///./scripts/validate_input.js","webpack:///./scripts/fetchCountries.js"],"names":["htmlArea","document","querySelector","input","moreInfoAbout","countryName","displayResults","data","number","length","innerHTML","alert","text","status","error","countriesList","createElement","className","forEach","country","p","a","name","appendChild","displayMultipleCountries","html","flag","capital","population","languages","map","language","displaySingleCountry","addEventListener","debounce","target","value","trim","console","log","invalidString","fetch","then","res","json","catch","fetchCountries"],"mappings":"iOAGaA,G,oBAAWC,SAASC,cAAc,eAClCC,EAAQF,SAASC,cAAc,WAQtCE,EAAgB,SAACC,GACnB,uCAAwCA,GAuC/BC,EAAiB,SAACC,GAE3B,ICjDyBC,EDiDnBC,EAASF,EAAKE,OAKpB,OAHAT,EAASU,UAAY,GAGlBD,EAAS,ICtDaD,EDuDDC,ECvDYE,gBAAM,CAC1CC,KAAM,IAAIJ,EAAN,mDDyDc,KAAfD,EAAKM,QCtDsBC,gBAAM,CACxCF,KAAM,+CDyDEH,EAAS,GAAKA,EAAS,GA9BI,SAACF,GAChC,IAAMQ,EAAiBd,SAASe,cAAc,MAW9C,OAVAD,EAAcE,UAAY,kBAC1BV,EAAKW,SAAQ,SAAAC,GACX,IAAMC,EAAInB,SAASe,cAAc,MACjCI,EAAEH,UAAY,kBAEd,IAAMI,EAAI,YAAYjB,EAAce,GAA7B,KAA0CA,EAAQG,KAAlD,OACPF,EAAEV,UAAYW,EACdN,EAAcQ,YAAYH,MAE5BpB,EAASuB,YAAYR,GACdR,EAmBEiB,CAAyBjB,GAGpB,GAAVE,EAxDqB,SAACF,GAC1B,IAAIkB,EAAO,GAmBX,OAlBAlB,EAAKW,SAAQ,SAAAC,GACbM,GAAI,uIAIwCN,EAAQO,KAJhD,UAI8DP,EAAQG,KAJtE,yGAOkCH,EAAQG,KAP1C,+DAQ+CH,EAAQQ,QARvD,sEASqDR,EAAQS,WAT7D,qEAUqET,EAAQU,UApBzDC,KAAI,SAAAC,GAAQ,OAAIA,EAAST,QAU7C,+DAW4ClB,EAAce,EAAQG,MAXlE,6FAgBJtB,EAASU,UAAYe,EACdlB,EAqCEyB,CAAqBzB,QAD9B,I,UElDJJ,EAAM8B,iBAAiB,QAASC,GAbV,SAAC3B,GACnB,IAAMe,EAAOf,EAAK4B,OAAOC,OCPd,SAAwBd,GAEnC,OAAIA,EAAKe,SACLC,QAAQC,IAAI,iBACZvC,EAASU,UAAY,IACd,IDKR8B,CAAclB,IEZN,SAAwBA,GAEnC,OAAOmB,MADK,yCAAyCnB,GACnCoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQC,MAAMP,QAAQC,KFaxDO,CAAexB,GACdoB,KAAKpC,GACLuC,MAAMP,QAAQC,OAIqC,Q","file":"main.4ee43b654c7127ff7338.js","sourcesContent":["import { PNotifyAlert, PNotifyError } from './notifications.js'\n\n\nexport const htmlArea = document.querySelector(\"#countries\")\nexport const input = document.querySelector(\"#search\")\n\n\nconst showLanguagesFrom = (array) => {\n    const languages = array.map(language => language.name)\n    return languages\n  }\n  \nconst moreInfoAbout = (countryName) => {\n    return `https://en.wikipedia.org/wiki/${countryName}`\n  }\nconst displaySingleCountry = (data) => {\n    let html = \"\"\n    data.forEach(country => {\n    html +=\n      `<div class=\"country\">\n        <div class=\"row\">\n            <div class=\"col-sm-6\">\n              <img class=\"country__flag\" src=\"${country.flag}\" alt=\"${country.name}\" />\n            </div>\n            <div class=\"col-sm-6\">\n              <h2 class=\"country__name\">${country.name}</h2>\n              <div class=\"country__capital\">Capital: ${country.capital}</div>\n              <div class=\"country__population\">Population: ${country.population}</div>\n              <div class=\"country__languages\">Languages: ${showLanguagesFrom(country.languages)} </div>\n              <div class=\"country__more\"><a href=\"${moreInfoAbout(country.name)}\" target=\"_blank\">More info</a></div>\n            </div>\n        </div>\n      </div>`\n    })\n    htmlArea.innerHTML = html\n    return data\n  }\n  const displayMultipleCountries = (data) => {\n    const countriesList  = document.createElement('ul')\n    countriesList.className = \"countries__list\";\n    data.forEach(country => {\n      const p = document.createElement('li')\n      p.className = 'countries__item'\n      \n      const a = `<a href=\"${moreInfoAbout(country)}\">${country.name}</a>`\n      p.innerHTML = a\n      countriesList.appendChild(p)\n    })\n    htmlArea.appendChild(countriesList)\n    return data\n  }\n\nexport const displayResults = (data) => {\n\n    const length = data.length\n    //clean html\n    htmlArea.innerHTML = \"\"\n\n    //send notificationstatus\n    if(length > 10) {\n        return PNotifyAlert(length);\n    }\n\n    if(data.status == 404) {\n      PNotifyError()\n    }\n\n    if (length > 2 && length < 10) {\n      return displayMultipleCountries(data)\n    }\n\n    if (length == 1) {\n      return displaySingleCountry(data)\n    }\n\n\n}\n","import { alert, error } from '@pnotify/core';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\n\n\nexport const PNotifyAlert = (number) => alert({\n    text: ` ${number} countries found. Please, specify exact name`\n});\n\nexport const PNotifyError = () => error({\ntext: \"Country not found. Please try another name\"\n});\n","import './styles.scss';\n\nimport * as debounce from 'lodash.debounce'\nimport  fetchCountries  from './scripts/fetchCountries'\nimport { input, displayResults } from './scripts/rendering'\nimport invalidString from './scripts/validate_input'\n\n\nconst searchCountry = (data) => {\n    const name = data.target.value\n    //don't allow strings with only spaces\n    //should we do validation in HTML ?\n    if(invalidString(name)) {\n        return\n    }\n    fetchCountries(name)\n    .then(displayResults)\n    .catch(console.log);\n\n  }\n\ninput.addEventListener(\"input\", debounce(searchCountry, 500))\n","import { htmlArea } from './rendering.js'\n\nexport default function invalidString (name) {\n    // invalid if contains only spaces\n    if(!name.trim()) {\n        console.log(\"name is empty\")\n        htmlArea.innerHTML = \"\"\n        return true\n    } \n    else {\n        return false\n    }\n}\n","export default function fetchCountries(name) {\n    const url = `https://restcountries.eu/rest/v2/name/${name}`;\n    return fetch(url).then(res => res.json()).catch(console.log);\n} \n"],"sourceRoot":""}